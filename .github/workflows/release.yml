name: 🚀 Release

on:
  push:
    tags:
      - "v*.*.*"
  workflow_dispatch:
    inputs:
      tag:
        description: "Tag to release"
        required: true
        type: string

permissions:
  contents: write
  packages: write
  id-token: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

env:
  GO_VERSION: "1.24.5"
  REGISTRY: ghcr.io

jobs:
  # ===================================
  # Pre-Release Validation
  # ===================================
  validate:
    name: 🔍 Pre-Release Validation
    runs-on: ubuntu-latest
    timeout-minutes: 10

    outputs:
      version: ${{ steps.version.outputs.version }}
      is-prerelease: ${{ steps.version.outputs.is-prerelease }}

    steps:
      - name: 📂 Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: 🏷️ Get version from tag
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.tag }}"
          else
            VERSION="${GITHUB_REF#refs/tags/}"
          fi

          echo "version=${VERSION}" >> "$GITHUB_OUTPUT"

          # Check if this is a prerelease
          if [[ "$VERSION" =~ -[a-zA-Z] ]]; then
            echo "is-prerelease=true" >> "$GITHUB_OUTPUT"
          else
            echo "is-prerelease=false" >> "$GITHUB_OUTPUT"
          fi

          echo "📋 Version: ${VERSION}"
          echo "📋 Pre-release: $([[ "$VERSION" =~ -[a-zA-Z] ]] && echo 'true' || echo 'false')"

      - name: 🐹 Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: ✅ Validate build
        run: |
          go mod download
          go build -v ./...
          go test -v ./...

  # ===================================
  # Binary Release with GoReleaser
  # ===================================
  goreleaser:
    name: 🔨 Build & Release Binaries
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: validate

    steps:
      - name: 📂 Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: 🐹 Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: 🔨 Run GoReleaser
        uses: goreleaser/goreleaser-action@v6
        with:
          distribution: goreleaser
          version: "~> v2"
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 📤 Upload build artifacts
        uses: actions/upload-artifact@v5
        with:
          name: release-artifacts
          path: dist/
          retention-days: 30

  # ===================================
  # Container Images Release
  # ===================================
  containers:
    name: 🐳 Container Images
    runs-on: ubuntu-latest
    timeout-minutes: 45
    needs: validate
    if: github.ref_type == 'tag'

    strategy:
      fail-fast: false
      matrix:
        os:
          - alpine
          - rocky-8
          - rocky-9
          - ubuntu-focal
          - ubuntu-jammy
          - ubuntu-noble

    steps:
      - name: 📂 Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔐 Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🔐 Log in to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: 📋 Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY }}/${{ github.repository }}-${{ matrix.os }}
            m0rf30/yap-${{ matrix.os }}
          labels: |
            maintainer=M0Rf30
            org.opencontainers.image.authors=M0Rf30
            org.opencontainers.image.title=yap-${{ matrix.os }}
            org.opencontainers.image.description=YAP - Yet Another Packager for ${{ matrix.os }}
            org.opencontainers.image.vendor=M0Rf30
            org.opencontainers.image.version=${{ needs.validate.outputs.version }}
          tags: |
            type=ref,event=tag
            type=raw,value=latest,enable={{is_default_branch}}
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}

      - name: 🔨 Build and push container image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: build/deploy/${{ matrix.os }}/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ needs.validate.outputs.version }}
            BUILD_TIME=${{ github.run_id }}
            COMMIT=${{ github.sha }}

  # ===================================
  # Package Registry Publishing
  # ===================================
  packages:
    name: 📦 Publish Packages
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [validate, goreleaser]
    if: github.ref_type == 'tag' && !needs.validate.outputs.is-prerelease

    steps:
      - name: 📂 Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: 📥 Download release artifacts
        uses: actions/download-artifact@v6
        with:
          name: release-artifacts
          path: dist/

      - name: 🚀 Trigger pkg.go.dev update
        run: |
          # Trigger Go module proxy to fetch the new version
          curl -f "https://proxy.golang.org/github.com/M0Rf30/yap/v2/@v/${{ needs.validate.outputs.version }}.info" || echo "Module proxy update initiated"

  # ===================================
  # Release Notifications
  # ===================================
  notify:
    name: 📢 Release Notifications
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [validate, goreleaser, containers, packages]
    if: always() && github.ref_type == 'tag'

    steps:
      - name: 📊 Determine release status
        id: status
        run: |
          if [[ "${{ needs.goreleaser.result }}" == "success" ]]; then
            echo "status=success" >> "$GITHUB_OUTPUT"
            echo "message=🎉 Release ${{ needs.validate.outputs.version }} completed successfully!" >> "$GITHUB_OUTPUT"
          else
            echo "status=failure" >> "$GITHUB_OUTPUT"
            echo "message=❌ Release ${{ needs.validate.outputs.version }} failed. Check the workflow logs." >> "$GITHUB_OUTPUT"
          fi

      - name: 📝 Create release summary
        run: |
          {
            echo "## 🚀 Release Summary"
            echo ""
            echo "**Version:** ${{ needs.validate.outputs.version }}"
            echo "**Pre-release:** ${{ needs.validate.outputs.is-prerelease }}"
            echo "**Status:** ${{ steps.status.outputs.status }}"
            echo ""
            echo "### 📋 Job Results"
            echo "- **Validation:** ${{ needs.validate.result }}"
            echo "- **Binary Release:** ${{ needs.goreleaser.result }}"
            echo "- **Container Images:** ${{ needs.containers.result }}"
            echo "- **Package Publishing:** ${{ needs.packages.result }}"
            echo ""
          } >> "$GITHUB_STEP_SUMMARY"
          
          if [[ "${{ steps.status.outputs.status }}" == "success" ]]; then
            {
              echo "✅ Release completed successfully!"
              echo ""
              echo "📦 **Downloads:** https://github.com/${{ github.repository }}/releases/tag/${{ needs.validate.outputs.version }}"
              echo "🐳 **Container Images:** Available on GitHub Container Registry and Docker Hub"
              echo "📚 **Documentation:** https://pkg.go.dev/github.com/M0Rf30/yap/v2@${{ needs.validate.outputs.version }}"
            } >> "$GITHUB_STEP_SUMMARY"
          else
            echo "❌ Release failed. Please check the workflow logs and try again." >> "$GITHUB_STEP_SUMMARY"
          fi
